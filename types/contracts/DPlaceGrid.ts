/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export declare namespace DPlaceGrid {
  export type PlaceStruct = {
    lastUpdateTime: BigNumberish;
    contested: BigNumberish;
    purchasePrice: BigNumberish;
    owner: string;
    data: BytesLike;
  };

  export type PlaceStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string
  ] & {
    lastUpdateTime: BigNumber;
    contested: BigNumber;
    purchasePrice: BigNumber;
    owner: string;
    data: string;
  };
}

export interface DPlaceGridInterface extends utils.Interface {
  functions: {
    "basePrice()": FunctionFragment;
    "calculatePlacePrice(uint256,uint256)": FunctionFragment;
    "calculatePlacesPrice(uint256[],uint256[])": FunctionFragment;
    "claimPlace(uint256,uint256,bytes)": FunctionFragment;
    "claimPlaces(uint256[],uint256[],bytes[])": FunctionFragment;
    "getPlace(uint256,uint256)": FunctionFragment;
    "grid(uint256,uint256)": FunctionFragment;
    "gridSize()": FunctionFragment;
    "initialize(uint256,uint256,uint256,uint256)": FunctionFragment;
    "isDataValid(bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "priceDecayInterval()": FunctionFragment;
    "priceVelocity()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setBasePrice(uint256)": FunctionFragment;
    "setGridSize(uint256)": FunctionFragment;
    "setPriceVelocity(uint256)": FunctionFragment;
    "setpPriceDecayInterval(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "basePrice"
      | "calculatePlacePrice"
      | "calculatePlacesPrice"
      | "claimPlace"
      | "claimPlaces"
      | "getPlace"
      | "grid"
      | "gridSize"
      | "initialize"
      | "isDataValid"
      | "owner"
      | "priceDecayInterval"
      | "priceVelocity"
      | "renounceOwnership"
      | "setBasePrice"
      | "setGridSize"
      | "setPriceVelocity"
      | "setpPriceDecayInterval"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "basePrice", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "calculatePlacePrice",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculatePlacesPrice",
    values: [BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimPlace",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimPlaces",
    values: [BigNumberish[], BigNumberish[], BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlace",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "grid",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "gridSize", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isDataValid",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "priceDecayInterval",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "priceVelocity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBasePrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setGridSize",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceVelocity",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setpPriceDecayInterval",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "basePrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculatePlacePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculatePlacesPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimPlace", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimPlaces",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPlace", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "grid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gridSize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isDataValid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "priceDecayInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "priceVelocity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBasePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGridSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPriceVelocity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setpPriceDecayInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PlaceChanged(uint256,uint256,address,bytes,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PlaceChanged"): EventFragment;
}

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PlaceChangedEventObject {
  x: BigNumber;
  y: BigNumber;
  owner: string;
  data: string;
  price: BigNumber;
}
export type PlaceChangedEvent = TypedEvent<
  [BigNumber, BigNumber, string, string, BigNumber],
  PlaceChangedEventObject
>;

export type PlaceChangedEventFilter = TypedEventFilter<PlaceChangedEvent>;

export interface DPlaceGrid extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DPlaceGridInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    basePrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    calculatePlacePrice(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calculatePlacesPrice(
      x: BigNumberish[],
      y: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    claimPlace(
      x: BigNumberish,
      y: BigNumberish,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    claimPlaces(
      x: BigNumberish[],
      y: BigNumberish[],
      data: BytesLike[],
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    getPlace(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[DPlaceGrid.PlaceStructOutput]>;

    grid(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, string, string] & {
        lastUpdateTime: BigNumber;
        contested: BigNumber;
        purchasePrice: BigNumber;
        owner: string;
        data: string;
      }
    >;

    gridSize(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      _basePrice: BigNumberish,
      _priceDecayInterval: BigNumberish,
      _priceVelocity: BigNumberish,
      _gridSize: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    isDataValid(data: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    priceDecayInterval(overrides?: CallOverrides): Promise<[BigNumber]>;

    priceVelocity(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setBasePrice(
      _basePrice: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setGridSize(
      _gridSize: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setPriceVelocity(
      _priceVelocity: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setpPriceDecayInterval(
      _priceDecayInterval: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  basePrice(overrides?: CallOverrides): Promise<BigNumber>;

  calculatePlacePrice(
    x: BigNumberish,
    y: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculatePlacesPrice(
    x: BigNumberish[],
    y: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  claimPlace(
    x: BigNumberish,
    y: BigNumberish,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  claimPlaces(
    x: BigNumberish[],
    y: BigNumberish[],
    data: BytesLike[],
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  getPlace(
    x: BigNumberish,
    y: BigNumberish,
    overrides?: CallOverrides
  ): Promise<DPlaceGrid.PlaceStructOutput>;

  grid(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, string, string] & {
      lastUpdateTime: BigNumber;
      contested: BigNumber;
      purchasePrice: BigNumber;
      owner: string;
      data: string;
    }
  >;

  gridSize(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    _basePrice: BigNumberish,
    _priceDecayInterval: BigNumberish,
    _priceVelocity: BigNumberish,
    _gridSize: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  isDataValid(data: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  priceDecayInterval(overrides?: CallOverrides): Promise<BigNumber>;

  priceVelocity(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setBasePrice(
    _basePrice: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setGridSize(
    _gridSize: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setPriceVelocity(
    _priceVelocity: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setpPriceDecayInterval(
    _priceDecayInterval: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    basePrice(overrides?: CallOverrides): Promise<BigNumber>;

    calculatePlacePrice(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculatePlacesPrice(
      x: BigNumberish[],
      y: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimPlace(
      x: BigNumberish,
      y: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    claimPlaces(
      x: BigNumberish[],
      y: BigNumberish[],
      data: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    getPlace(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<DPlaceGrid.PlaceStructOutput>;

    grid(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, string, string] & {
        lastUpdateTime: BigNumber;
        contested: BigNumber;
        purchasePrice: BigNumber;
        owner: string;
        data: string;
      }
    >;

    gridSize(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _basePrice: BigNumberish,
      _priceDecayInterval: BigNumberish,
      _priceVelocity: BigNumberish,
      _gridSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    isDataValid(data: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    priceDecayInterval(overrides?: CallOverrides): Promise<BigNumber>;

    priceVelocity(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setBasePrice(
      _basePrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setGridSize(
      _gridSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPriceVelocity(
      _priceVelocity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setpPriceDecayInterval(
      _priceDecayInterval: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "PlaceChanged(uint256,uint256,address,bytes,uint256)"(
      x?: null,
      y?: null,
      owner?: null,
      data?: null,
      price?: null
    ): PlaceChangedEventFilter;
    PlaceChanged(
      x?: null,
      y?: null,
      owner?: null,
      data?: null,
      price?: null
    ): PlaceChangedEventFilter;
  };

  estimateGas: {
    basePrice(overrides?: CallOverrides): Promise<BigNumber>;

    calculatePlacePrice(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculatePlacesPrice(
      x: BigNumberish[],
      y: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimPlace(
      x: BigNumberish,
      y: BigNumberish,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    claimPlaces(
      x: BigNumberish[],
      y: BigNumberish[],
      data: BytesLike[],
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    getPlace(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grid(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gridSize(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _basePrice: BigNumberish,
      _priceDecayInterval: BigNumberish,
      _priceVelocity: BigNumberish,
      _gridSize: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    isDataValid(data: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    priceDecayInterval(overrides?: CallOverrides): Promise<BigNumber>;

    priceVelocity(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setBasePrice(
      _basePrice: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setGridSize(
      _gridSize: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setPriceVelocity(
      _priceVelocity: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setpPriceDecayInterval(
      _priceDecayInterval: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    basePrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calculatePlacePrice(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculatePlacesPrice(
      x: BigNumberish[],
      y: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimPlace(
      x: BigNumberish,
      y: BigNumberish,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    claimPlaces(
      x: BigNumberish[],
      y: BigNumberish[],
      data: BytesLike[],
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getPlace(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grid(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gridSize(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _basePrice: BigNumberish,
      _priceDecayInterval: BigNumberish,
      _priceVelocity: BigNumberish,
      _gridSize: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    isDataValid(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceDecayInterval(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    priceVelocity(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setBasePrice(
      _basePrice: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setGridSize(
      _gridSize: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setPriceVelocity(
      _priceVelocity: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setpPriceDecayInterval(
      _priceDecayInterval: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
